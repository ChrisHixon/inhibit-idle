#!/usr/bin/env python3

# Usage: inhibit-idle -h | --help | (-SHORTMETHOD | --LONGMETHOD) CMD [ARG]...
# Run a command with idle inhibited, using one of the following methods:
# 1) ScreenSaver (dbus)     [ -s, --screensaver ]
# 2) logind/systemd (dbus)  [ -l, --logind ]
# 3) Wayland(via protocol)  [ -w, --wayland ]

APP_NAME="inhibit-idle"
INHIBIT_REASON="Running command with idle inhibited..."

import dbus
import os
import subprocess
import sys

def usage(out=sys.stdout):
    print(f"Usage: {os.path.basename(sys.argv[0])} -h | --help | (-SHORTMETHOD | --LONGMETHOD) CMD [ARG]...", file=out)

def help(out=sys.stdout):
    usage(out=out)
    print(f"\nRun a command with idle inhibited. Example: inhibit-idle -s sleep 60\n", file=out)
    print(f"METHODS:", file=out)
    print(f"  -s, --screensaver     ScreenSaver (dbus)", file=out)
    print(f"  -l, --logind          logind/systemd (dbus)", file=out)
    print(f"  -w, --wayland         Wayland (protocol)", file=out)

def print_exception(e):
    message = str(e)
    sep = ": " if message else ""
    print(f"{type(e).__name__}{sep}{message}", file=sys.stderr)

def method_screensaver(*command):
    try:
        bus = dbus.SessionBus()
        obj = bus.get_object("org.freedesktop.ScreenSaver", "/org/freedesktop/ScreenSaver")
        iface = dbus.Interface(obj, "org.freedesktop.ScreenSaver")
        cookie = iface.Inhibit(APP_NAME, INHIBIT_REASON)
    except BaseException as e:
        print_exception(e)
        return

    print(f"Idle inhibited using ScreenSaver method (cookie: {cookie})", file=sys.stderr)

    try:
        print(f"Running {command[0]}...", file=sys.stderr)
        subprocess.run(command)
    except BaseException as e:
        print_exception(e)
    finally:
        iface.UnInhibit(cookie)
        print("Inhibition released", file=sys.stderr)

def method_login1(*command):
    try:
        obj = dbus.SystemBus().get_object("org.freedesktop.login1", "/org/freedesktop/login1")
        iface = dbus.Interface(obj, "org.freedesktop.login1.Manager")
        fd = iface.Inhibit("idle", APP_NAME, INHIBIT_REASON, "block").take()
    except BaseException as e:
        print_exception(e)
        return

    print(f"Idle inhibited using login1 method (fd: {fd}).", file=sys.stderr)

    try:
        print(f"Running {command[0]}...", file=sys.stderr)
        subprocess.run(command)
    except BaseException as e:
        print_exception(e)
    finally:
        os.close(fd)
        print("Inhibition released", file=sys.stderr)

def method_wayland(*command):
    # Wayland idle inhibition code originally from https://github.com/stwa/wayland-idle-inhibitor
    # Licensed under the WTFPL (http://www.wtfpl.net/)

    from dataclasses import dataclass
    from pywayland.client.display import Display
    from pywayland.protocol.idle_inhibit_unstable_v1.zwp_idle_inhibit_manager_v1 import (
        ZwpIdleInhibitManagerV1,
    )
    from pywayland.protocol.wayland.wl_compositor import WlCompositor
    from pywayland.protocol.wayland.wl_registry import WlRegistryProxy
    from pywayland.protocol.wayland.wl_surface import WlSurface

    @dataclass
    class GlobalRegistry:
        surface: WlSurface | None = None
        inhibit_manager: ZwpIdleInhibitManagerV1 | None = None

    def handle_registry_global(
        wl_registry: WlRegistryProxy, id_num: int, iface_name: str, version: int
    ) -> None:
        global_registry: GlobalRegistry = wl_registry.user_data or GlobalRegistry()

        if iface_name == "wl_compositor":
            compositor = wl_registry.bind(id_num, WlCompositor, version)
            global_registry.surface = compositor.create_surface()  # type: ignore
        elif iface_name == "zwp_idle_inhibit_manager_v1":
            global_registry.inhibit_manager = wl_registry.bind(
                id_num, ZwpIdleInhibitManagerV1, version
            )

    def shutdown() -> None:
        display.dispatch()
        display.roundtrip()
        display.disconnect()

    try:
        global_registry = GlobalRegistry()

        display = Display()
        display.connect()

        registry = display.get_registry()  # type: ignore
        registry.user_data = global_registry
        registry.dispatcher["global"] = handle_registry_global

        display.dispatch()
        display.roundtrip()

        if global_registry.surface is None or global_registry.inhibit_manager is None:
            print("Wayland seems not to support idle_inhibit_unstable_v1 protocol.", file=sys.stderr)
            shutdown()
            return

        inhibitor = global_registry.inhibit_manager.create_inhibitor(  # type: ignore
            global_registry.surface
        )

        display.dispatch()
        display.roundtrip()

    except BaseException as e:
        print_exception(e)
        return

    print("Idle inhibited using Wayland protocol", file=sys.stderr)

    try:
        print(f"Running {command[0]}...", file=sys.stderr)
        subprocess.run(command)
    except BaseException as e:
        print_exception(e)
    finally:
        print("Inhibition released", file=sys.stderr)
        inhibitor.destroy()
        shutdown()

def main():
    if len(sys.argv) == 2 and sys.argv[1] in ["--help", "-h"]:
        help()
        sys.exit(0)

    if len(sys.argv) < 3:
        usage(sys.stderr)
        sys.exit(1)

    method = sys.argv[1]
    command = sys.argv[2:]

    if method in ["--screensaver", "-s"]:
        method_screensaver(*command)
    elif method in ["--logind", "--systemd", "--login1", "-l"]:
        method_login1(*command)
    elif method in ["--wayland", "-w"]:
        method_wayland(*command)
    else:
        usage(sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
     main()

